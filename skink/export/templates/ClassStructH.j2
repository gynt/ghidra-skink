{% from "macros/wrap_namespaces.j2" import wrap_namespaces with context %}
{% from "macros/includes.j2" import includes %}
{% from "macros/usings.j2" import usings %}
{%- set ns = (namespace_path.split('::') if namespace_path is string else namespace_path)
              | reject('equalto','') | list -%}

#pragma once

{{ '#include "pch.h"' if use_pch }}

{{ includes(include_paths) }}

{# Do NOT pass `caller` hereâ€”it's injected implicitly by `call` #}
{%- call wrap_namespaces(ns) -%}

{{ usings(using_paths) }}

#pragma pack(push, 1)
// SIZE: {{ "0x%08X" % struct_size }}
typedef struct {{ struct_name }}
{

  {% for field in fields -%}
  {{ field.string }}; // {{ '0x%08X' % field.offset }} length: {{ field.length }}
  {% endfor %}

} {{ struct_name }};
#pragma pack(pop)

static_assert(sizeof({{ struct_name }}) == {{ struct_size }});

{%- endcall -%}
