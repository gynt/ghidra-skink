{% from "macros/wrap_namespaces.j2" import wrap_namespaces with context %}
{% from "macros/includes.j2" import includes %}
{%- set ns = (namespace_path.split('::') if namespace_path is string else namespace_path)
              | reject('equalto','') | list -%}

#pragma once

{{ '#include "pch.h"' if use_pch }}

{# Do NOT pass `caller` hereâ€”it's injected implicitly by `call` #}
{%- call wrap_namespaces(ns) -%}

typedef enum {{ name }}
{

    {% for field in fields -%}
    {{ field.name }} = {{ field.value }}{{ ',' if not loop.last }} // {{ '0x%08X' % field.value }}
    {% endfor %}

} {{ name }};

static_assert(sizeof({{ name }}) == 4);

{%- endcall -%}
